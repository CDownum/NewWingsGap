@page "/users"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject GapApiClient GapApiClient

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Last Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Gross Annual Income</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.MiddleName</td>
                    <td>@user.LastName</td>
                    <td>@user.StartDate.ToShortDateString()</td>
                    <td>@(user.EndDate == DateTime.MinValue ? string.Empty : user.EndDate.ToShortDateString())</td>
                    <td>@user.GrossAnnualIncome.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private User[]? users;

    protected override async Task OnInitializedAsync()
    {
        users = await GapApiClient.GetUsersAsync();
    }
}
